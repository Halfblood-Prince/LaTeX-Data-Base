% Release Notes for LaTeX Application Programming Interface (API) v 33.0.0 %

% Created by: Akhil Shimna Kumar %
% Initial release: 03-11-2023 %
% Last Update: 13-11-2024 %

% Disclaimer: Latex API v 33.0.0 %

% By using Latex API version 33.0.0, you acknowledge and agree to the following terms and conditions: %

% 1. Limited License: LaTeX Application Programming Interface (API) © 2023 by Akhil S Kumar is licensed under Attribution-NonCommercial-NoDerivatives 4.0 International (CC-BY-NC-ND). To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/. This license grants you the right to access and use the API for the sole purpose of document creation and rendering. %

% 2. Ownership: Latex API, including all intellectual property rights, remains the exclusive property of the creator. You do not acquire any ownership or proprietary interest in the API, its codebase, or associated documentation. %

% 3. Usage Restrictions: You agree not to reverse engineer, decompile, or disassemble the Latex API, or attempt to derive its source code. Unauthorized use or distribution of the API is strictly prohibited. This API is created for use only within Group E02A. No one outside of Group E02A is permitted to use this in their LaTeX Project Report. Group E02A asserts the rights to use this API in their LaTeX reports. Use by anyone outside Group E02A is prohibitted. No part of this API should be modified or used for any other purpose without the consent of the creator of this code %

% 4. No Warranty: Latex API is provided "as is" without any warranty, express or implied. I do not guarantee the accuracy, reliability, or suitability of the API for any particular purpose. Your use of the API is at your own risk. %

% 5. Limitation of Liability: In no event shall the creator of Latex API be liable for any direct, indirect, incidental, special, exemplary, or consequential damages arising out of the use or inability to use the API, even if advised of the possibility of such damages. %

% 6. Modifications: I reserve the right to modify, suspend, or discontinue the Latex API at any time, with or without notice. I may also update these terms, and it is your responsibility to review them periodically. %
 

\ProvidesPackage{ASKLaTeXLib}

\RequirePackage{tikz}
\usetikzlibrary{angles,quotes}
\RequirePackage{tkz-euclide}
\RequirePackage{graphicx}
\RequirePackage{keyval}
\RequirePackage{subcaption}
\RequirePackage{lettrine}
\RequirePackage{multirow}
\Requirepackage{ifthen}

\define@key{imgkeys}{name}{\def\imgname{#1}}
\define@key{imgkeys}{width}{\def\imgwidth{#1}}
\define@key{imgkeys}{caption} {\def\cap{#1}}
\define@key{imgkeys}{label}{\def\lbl{#1}}
\define@key{eqnkeys}{a}{\def\myparamone{#1}}
\define@key{eqnkeys}{b}{\def\myparamtwo{#1}}
\define@key{eqnkeys}{c}{\def\myparamthree{#1}}
\define@key{eqnkeys}{d}{\def\myparamfour{#1}}
\define@key{eqnkeys}{e}{\def\myparamfive{#1}}
\define@key{eqnkeys}{f}{\def\myparamsix{#1}}
\define@key{eqnkeys}{g}{\def\myparamseven{#1}}
\define@key{eqnkeys}{h}{\def\myparameight{#1}}
\define@key{eqnkeys}{i}{\def\myparamnine{#1}}
\define@key{rowkeys}{lname}{\def\leftimgname{#1}}
\define@key{rowkeys}{lcaption}{\def\leftimgcaption{#1}}
\define@key{rowkeys}{llabel}{\def\leftimglabel{#1}}
\define@key{rowkeys}{rname}{\def\rightimgname{#1}}
\define@key{rowkeys}{rcaption}{\def\rightimgcaption{#1}}
\define@key{rowkeys}{rlabel}{\def\rightimglabel{#1}}
\define@key{rowkeys}{imgcaption}{\def\fullimgcaption{#1}}
\define@key{rowkeys}{imglabel}{\def\fullimglabel{#1}}
\define@key{tabkeys}{type}{\def\tbltype{#1}}
\define@key{tabkeys}{header}{\def\tblheader{#1}}
\define@key{tabkeys}{body}{\def\tblbody{#1}}
\define@key{tblkeys}{tableone}{\def\tblone{#1}}
\define@key{tblkeys}{tabletwo}{\def\tbltwo{#1}}
\define@key{tblkeys}{tablecaption}{\def\tblcap{#1}}
\define@key{tblkeys}{tablelabel}{\def\tbllab{#1}}


\newcommand{\img}[2]{ \setkeys{imgkeys}{width=, caption=, label=} \setkeys{imgkeys}{#2} \begin{figure}[#1] \centering \ifx\imgwidth\empty \def\imgwidth{\linewidth} \else \fi \includegraphics[width= \imgwidth, keepaspectratio]{\imgname} \captionsetup{justification=centering} \ifx\cap\empty\else \caption{\cap} \fi \ifx\lbl\empty\else \label{\lbl} \fi \end{figure} \setkeys{imgkeys}{name=, width=, caption=, label=} } \newcommand{\fig}[1]{ \setkeys{imgkeys}{width=, caption=, label=} \setkeys{imgkeys}{#1} \begin{figure}[h] \centering \ifx\imgwidth\empty \def\imgwidth{\linewidth} \else \fi \imgname \captionsetup{justification=centering} \ifx\cap\empty\else \caption{\cap} \fi \ifx\lbl\empty\else \label{\lbl} \fi \end{figure} \setkeys{imgkeys}{name=, width=, caption=, label=} } \newcommand{\p}[0]{ \noindent } \newcommand{\pb}[0]{ \vfill \pagebreak } \newcommand{\eqvar}[1]{ \setkeys{eqnkeys}{a=, b=, c=, d=, e=, f=, g=, h=, i=} \setkeys{eqnkeys}{#1} where: \begin{itemize} \ifx\myparamone\empty\else \item[] \myparamone \fi \ifx\myparamtwo\empty\else \item[] \myparamtwo \fi \ifx\myparamthree\empty\else \item[] \myparamthree \fi \ifx\myparamfour\empty\else \item[] \myparamfour \fi \ifx\myparamfive\empty\else \item[] \myparamfive \fi \ifx\myparamsix\empty\else \item[] \myparamsix \fi \ifx\myparamseven\empty\else \item[] \myparamseven \fi \ifx\myparameight\empty\else \item[] \myparameight \fi \ifx\myparamnine\empty\else \item[] \myparamnine \fi \end{itemize} \setkeys{eqnkeys}{a=, b=, c=, d=, e=, f=, g=, h=, i=} } \newcommand{\imgrow}[1]{ \setkeys{rowkeys}{#1} \begin{figure}[htbp] \centering \begin{subfigure}[b]{0.45\textwidth} \centering \includegraphics[width=\textwidth]{\leftimgname} \caption{\leftimgcaption} \label{\leftimglabel} \end{subfigure} \hfill \begin{subfigure}[b]{0.45\textwidth} \centering \includegraphics[width=\textwidth]{\rightimgname} \caption{\rightimgcaption} \label{\rightimglabel} \end{subfigure} \caption{\fullimgcaption} \label{\fullimglabel} \end{figure} } \newcommand{\customtableofcontents}{  \addtocontents{toc}{\protect\setcounter{tocdepth}{-1}} \tableofcontents \addtocontents{toc}{\protect\setcounter{tocdepth}{2}} } \newcommand{\s}[1]{\renewcommand{\arraystretch}{#1}} \newcommand{\mergepdf}[1]{\includepdf[fitpaper=true]{#1}} \newcommand{\eq}[2]{ \begin{equation} #1 \label{#2} \end{equation} } \newcommand{\ADCSInterface}[0]{\section{ADCS Interface And Data Transmission} \label{sec: ADCS Interface And Data Transmission} This section delves into the essential aspects of the ADCS interface, focusing first on the electrical interface (\autoref{subsec: Electrical Interface}) and then the data transmission interface (\autoref{subsec:Data Transmission Interface}). The electrical interface encompasses techniques to ensure signal integrity, such as filtering, grounding, shielding and differential signalling, which collectively help mitigate noise and electromagnetic interference. Following this, the data transmission interface is examined, focusing on the communication protocols, error correction techniques and data encoding standards critical for ensuring reliable data flow within the ADCS. Together, these elements form a robust communication framework, essential for successfully operating the satellite’s ADCS subsystem in space. \subsection{Electrical Interface} \label{subsec: Electrical Interface} The electrical interface of the Attitude Determination and Control System (ADCS) is pivotal for ensuring the effective operation and communication of various components within the satellite. This interface encompasses the connections between power supplies, sensors, actuators and control electronics, facilitating the flow of data and commands necessary for precise attitude control. Given the unique challenges of the space environment, such as radiation, temperature fluctuations and electromagnetic interference, the design of the electrical interface must prioritize reliability and robustness. This section will explore critical aspects of the electrical interface, focusing on filtering and grounding techniques, shielding, differential signalling and twisted pair cables, all essential for maintaining signal integrity and minimizing noise in the ADCS subsystem. \subsubsection{Filtering and Grounding} Filtering and grounding are essential techniques for maintaining the integrity of electrical signals within the ADCS subsystem. Electrical noise, especially high-frequency interference, can degrade the performance of sensors and actuators, leading to inaccuracies in data and control signals. To address this, low-pass filters are utilised to block unwanted high-frequency noise by allowing only the lower-frequency, proper signals to pass through \cite{Low Pass Filter}. This ensures that the processed signals remain accurate and reliable. In addition to filtering, proper grounding techniques are critical for reducing electrical noise and preventing ground loops, which can occur when different system parts are connected to multiple ground points. Ground loops introduce unwanted currents that generate noise, potentially interfering with the system’s performance. Establishing a stable grounding point and using proper grounding practices can minimise the risk of such issues, thereby enhancing the overall electrical stability and noise immunity of the ADCS. \subsubsection{Shielding, Differential Signalling and Twisted Pair Cables} In the ADCS subsystem of a satellite, effective management of Electromagnetic Interference (EMI) and noise is crucial to ensuring the accuracy and reliability of data transmission between sensors, actuators, and control systems. One critical method to block EMI is shielding, in which metallic or conductive coatings are applied around cables and components \cite{EM Shielding}. This shielding serves as a protective barrier, similar to a Faraday cage, preventing external electromagnetic fields from disrupting the signals within the system. In addition, differential signalling techniques, such as Low Voltage Differential Signalling (LVDS), are employed to further reduce noise. Instead of relying on the absolute value of a signal, differential signalling compares the difference between two signals, making it more resistant to interference and ensuring more stable data transmission. Another essential technique involves twisting pairs of wires, which cancels out electromagnetic noise by ensuring that any interference affects both wires equally and can be negated. These combined shielding, differential signalling, and twisted pair wiring strategies create a robust defence against noise and interference, ensuring the ADCS subsystem operates with high precision and reliability in the challenging space environment. \subsection{Data Transmission Interface} \label{subsec:Data Transmission Interface} The Data Transmission Interface is a critical component of the Attitude Determination and Control System (ADCS) in the PESO satellite. This interface facilitates seamless communication between various subsystems and components, ensuring that essential data and commands are transmitted reliably and efficiently. By employing advanced communication protocols and robust error detection mechanisms, the Data Transmission Interface enhances the overall performance and stability of the ADCS. This section will explore the communication protocol used, the error detection and correction techniques employed, the design of interface boards, and the encoding standards for data and commands, all of which contribute to the successful operation of the satellite's control systems. \subsubsection{Communication Protocol} The ADCS system of PESO will utilize the SpaceWire communication protocol: a high-speed, low-latency, quadra-wire protocol specifically designed for space applications. SpaceWire supports data transfer rates of up to 400 Mbps, making it ideal for efficiently handling large volumes of data \footnote{Retrieved from \url{https://www.star-dundee.com/spacewire/getting-started/an-overview-of-the-spacewire-standard/}}. It features robust error detection and correction mechanisms, ensuring reliability in harsh space environments. SpaceWire can be implemented in both point-to-point or networked topologies, providing flexibility in system design \footnote{Retrieved from \url{https://www.esa.int/Enabling_Support/Space_Engineering_Technology/Onboard_Computers_and_Data_Handling/SpaceWire}}. Widely used in spacecraft and satellite systems, SpaceWire is well-suited for high-speed data transfer, making it a perfect fit for the ADCS system's communication needs. \subsubsection{Error Detection and Correction} Error detection and correction are crucial components of a satellite's ADCS subsystem, ensuring data transmission reliability between sensors and control units. One of the most effective techniques used for this purpose is the Reed-Solomon code, a widely adopted error detection and correction protocol. This method works by adding redundant data, in the form of parity bits\footnote{\label{CMU_Reed_Solomon_Code} Retrieved from \url{https://www.cs.cmu.edu/~guyb/realworld/reedsolomon/reed_solomon_codes.html}}, to the original data before transmitting them across potentially noisy communication channels, such as those found in satellite systems. The Reed-Solomon encoder generates these parity bits, enhancing the resilience of the transmitted data against errors that may occur during transmission \footnotemark[3]. Upon reception, the Reed-Solomon decoder analyses the data, detects corruption, and can repair multiple errors, thereby restoring the original message. This makes it particularly effective in environments prone to noise and interference, such as satellite communication. Using this protocol ensures that the ADCS subsystem remains accurate and intact even in the presence of signal degradation and critical control data, contributing to the overall stability and efficiency of the satellite's operations\footnotemark[3]. \subsubsection{Data and Command Encoding} Data encoding is critical to a satellite's Attitude Determination and Control System (ADCS), ensuring that telemetry and command data are communicated effectively between various components and subsystems. One widely adopted standard for this purpose is the XML Telemetry and Command Exchange (XTCE). XTCE is an XML-based framework that standardizes the format for encoding telemetry and command data, making it easier for different systems and organizations involved in a space mission to share and interpret data \cite{XTCE}. Using a standard format, XTCE facilitates seamless integration and communication across various platforms, reducing the complexity of data exchange and improving overall mission coordination. This standard simplifies data handling during the mission and ensures that the transmitted data is structured, consistent, and easily interpretable \cite{XTCE}. As a result, using XTCE enhances the reliability and efficiency of data transmission within the ADCS, contributing to smoother satellite operations and mission success. \section{Definition Of The ADCS Architecture} \label{Definition Of The ADCS Architecture} \img{H}{ name = figures/ADCS Block Diagram.png, caption = Detailed Block Diagram of the ADCS Architecture, label = fig:ADCS_Block_Diagram } This section provides a comprehensive breakdown of the Attitude Determination and Control System (ADCS) architecture for the PESO spacecraft. Each component of the ADCS plays a specific role in monitoring, controlling, and maintaining the spacecraft's desired orientation by managing both external and internal forces. The ADCS architecture comprises several key blocks: \begin{enumerate} \item \textbf{Dynamic Environment:} This block represents the external environmental forces acting on the spacecraft, such as gravitational forces, magnetic fields, aerodynamic torques and solar radiation pressure. These forces can impact the spacecraft's attitude and must be accounted for by the ADCS to maintain desired orientation. \item \textbf{Sensors:} The ADCS relies on various sensors to detect the spacecraft’s orientation and provide feedback. The sensor ensemble of the ADCS in PESO includes the following: \begin{itemize} \item Sun Sensors detect the direction of sunlight, helping the spacecraft orient itself in relation to the Sun. \item Earth Sensors measure the position or orientation of Earth relative to the spacecraft, which is useful as PESO is a low-Earth orbit mission. \item Star Sensors use star positions to determine the precise orientation of the spacecraft, as stars are fixed reference points in space. These sensors provide raw data in the form of voltages, which are then passed to the Pre-processing Unit. \end{itemize} \item \textbf{Pre-processing Unit (Input Side):} The raw voltage signals from the sensors are processed here to convert them into digital data (bits) that the ADCS Controller can interpret. This step may involve filtering, analog-to-digital conversion, and signal conditioning to ensure the data is accurate and usable for attitude determination. \item \textbf{ADCS Controller:} The ADCS controller is the core computational unit that processes sensor data and determines the necessary control actions. Based on the attitude data and other system inputs, the controller calculates the required adjustments to keep or change the spacecraft's orientation as desired. The controller also communicates with other subsystems and receives data from them for coordinated operations. \item \textbf{Pre-processing Unit (Output Side):} After the controller determines the required actions, it sends commands in digital format to the actuators. The pre-processing unit converts these digital signals back into analog voltages suitable for the actuator systems. \item \textbf{Actuators:} Actuators are devices that physically adjust the spacecraft's orientation based on the commands from the ADCS controller. The actuator assembly of PESO's ADCS system includes: \begin{itemize} \item Magnetorquers generate torque by interacting with Earth’s magnetic field, providing a means of attitude control without consuming propellant. \item Reaction Wheels are spinning wheels that change the spacecraft’s orientation by using the principle of angular momentum conservation. \item Cold Gas Micro-thrusters are small thrusters provide fine adjustments to the spacecraft’s position and orientation by expelling gas. Together, these actuators enable the spacecraft to adjust its orientation in three-dimensional space as directed by the ADCS. \end{itemize} \item \textbf{Power Distribution Unit:} This unit supplies the necessary power to the sensors, pre-processing units, ADCS controller, and actuators. Maintaining a steady power supply is critical for the continuous operation of the ADCS components. PESO’s power subsystem has a carefully planned budget that allocates power across all subsystems based on mission needs and power availability. ADCS, being a crucial subsystem for spacecraft orientation, often has a high power priority but may be allocated lower power levels during non-critical periods (when it is steady in orbit). During phases requiring precise orientation (e.g., scientific observations, communication sessions), the ADCS receives priority power to operate at maximum capacity. Reaction wheels are one of the most power-intensive components of the ADCS because they rely on motors to spin at high speeds, generating torque to change the spacecraft’s attitude. Power usage for reaction wheels can vary significantly based on the required rotational speed and torque. To reduce power consumption, the control system may activate reaction wheels only when necessary. When maintaining a stable attitude, power usage is minimised by spinning the wheels only as required to counteract disturbances. \item \textbf{Feedback Loop:} The ADCS architecture includes a feedback loop where the controller continuously receives updated data from the sensors, recalculates orientation needs, and commands the actuators accordingly. This loop allows the ADCS to dynamically respond to environmental changes and maintain the spacecraft’s stability and alignment in real time. \end{enumerate}}
